#!/bin/sh

# https://www.darrenlester.com/blog/git-pre-commit-stash
# https://stackoverflow.com/questions/20479794/how-do-i-properly-git-stash-pop-in-pre-commit-hooks-to-get-a-clean-working-tree

stash_name=pre-commit-$(date +%s)

# First, stash index and work dir, keeping only the
# to-be-committed changes in the working directory.
old_stash=$(git rev-parse -q --verify refs/stash)
git stash save -q --keep-index $stash_name
new_stash=$(git rev-parse -q --verify refs/stash)

# If there were no changes (e.g., `--amend` or `--allow-empty`)
# then nothing was stashed, and we should skip everything,
# including the tests themselves.  (Presumably the tests passed
# on the previous commit, so there is no need to re-run them.)
if [ "$old_stash" = "$new_stash" ]; then
    echo "pre-commit script: no changes to test"
    sleep 1 # XXX hack, editor may erase message
    exit 0
fi

# Perform testing...
#(pytest && pylava src)
pytest
status=$?

# Restore changes
git reset --hard -q
# find if we stashed something
stash_num=$(git stash list | grep $stash_name | sed -re 's/stash@\{(.*)\}.*/\1/')
if [ -n "$stash_num" ]
then
    git stash apply --index -q stash@{$stash_num} \
    && git stash drop -q stash@{$stash_num}
fi

# Exit with status from test-run: nonzero prevents commit
exit $status
